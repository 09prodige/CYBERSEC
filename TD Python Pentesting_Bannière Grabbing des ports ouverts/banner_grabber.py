
"""
Auteur : AKWE-EYI Jeremie
Objectif : Test des ports avec création de fichiers sauvegarde
"""
import socket
import threading
from datetime import datetime

output_file = "banners.txt"
lock = threading.Lock()

def banner_grab(host, port):
    try:
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)
        result = sock.connect_ex((host, port))
        if result == 0:
            try:
                if port in [80, 443]:
                    sock.sendall(b"HEAD / HTTP/1.1\\r\\nHost: " + host.encode() + b"\\r\\n\\r\\n")
                banner = sock.recv(1024).decode(errors='ignore').strip()
                if banner:
                    if "SSH" in banner.upper():
                        banner += " → Serveur SSH détecté"
                    elif "HTTP" in banner.upper():
                        banner += " → Serveur Web détecté"

                    timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                    output = f"{timestamp} Port {port} ouvert – Service détecté : {banner}"
                    print(output)

                    with lock:
                        with open(output_file, "a", encoding="utf-8") as f:
                            f.write(output + "\\n")
                            f.flush()
            except socket.timeout:
                pass
        sock.close()
    except Exception:
        pass

target = input("Entrez l'adresse IP à scanner : ")
start_port = int(input("Port de début : "))
end_port = int(input("Port de fin : "))

open(output_file, "w").close()
print(f"\\n[***] Scan de {target} sur les ports {start_port} à {end_port} [***]\\n")

for port in range(start_port, end_port + 1):
    t = threading.Thread(target=banner_grab, args=(target, port))
    t.start()


