import socket
import threading

# Fonction qui tente de se connecter à un port et de récupérer la bannière
def banner_grab(host, port):
    try:
        # Création de la socket
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.settimeout(1)

        # Connexion au port
        result = sock.connect_ex((host, port))
        if result == 0:
            try:
                # Pour les ports HTTP/HTTPS, on envoie une requête HEAD
                if port in [80, 443]:
                    sock.sendall(b"HEAD / HTTP/1.1\r\nHost: " + host.encode() + b"\r\n\r\n")

                # On tente de recevoir une bannière
                banner = sock.recv(1024).decode(errors='ignore').strip()
                if banner:
                    # Simple reconnaissance par mot-clé
                    if "SSH" in banner.upper():
                        banner += " → Serveur SSH détecté"
                    elif "HTTP" in banner.upper():
                        banner += " → Serveur Web détecté"

                    print(f"[+] Port {port} ouvert – Service détecté : {banner}")
            except socket.timeout:
                pass
        sock.close()
    except Exception as e:
        pass  # On ignore les erreurs pour garder un affichage propre

# Entrée utilisateur
target = input("Entrez l'adresse IP à scanner : ")
start_port = input("Port de début : ")
end_port = input("Port de fin : ")

print(f"\n[***] Scan de {target} sur les ports {start_port} à {end_port} [***]\n")

# Création des threads pour chaque port
for port in range(start_port, end_port + 1):
    t = threading.Thread(target=banner_grab, args=(target, port))
    t.start()
