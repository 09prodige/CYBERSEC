import socket
import threading
from datetime import datetime
import tkinter as tk
from tkinter import messagebox, scrolledtext, simpledialog

output_file = "banners.txt"
lock = threading.Lock()

# Dictionnaire simple pour bruteforce (le mot de passe correct est "doranco")
passwords = ["admin", "1234", "password", "toor", "test", "root", "doranco", "guest"]

# Fonction de bannière grabbing
def banner_grab_gui(host, start_port, end_port, output_widget):
    def banner_grab(host, port):
        try:
            sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            sock.settimeout(1)
            result = sock.connect_ex((host, port))
            if result == 0:
                try:
                    if port in [80, 443]:
                        sock.sendall(b"HEAD / HTTP/1.1\\r\\nHost: " + host.encode() + b"\\r\\n\\r\\n")
                    banner = sock.recv(1024).decode(errors='ignore').strip()
                    if banner:
                        if "SSH" in banner.upper():
                            banner += " → Serveur SSH détecté"
                        elif "HTTP" in banner.upper():
                            banner += " → Serveur Web détecté"

                        timestamp = datetime.now().strftime("[%Y-%m-%d %H:%M:%S]")
                        output = f"{timestamp} Port {port} ouvert – Service détecté : {banner}\\n"

                        with lock:
                            with open(output_file, "a", encoding="utf-8") as f:
                                f.write(output)
                                f.flush()
                        output_widget.insert(tk.END, output)
                except socket.timeout:
                    pass
            sock.close()
        except Exception:
            pass

    open(output_file, "w").close()
    output_widget.delete("1.0", tk.END)
    for port in range(start_port, end_port + 1):
        t = threading.Thread(target=banner_grab, args=(host, port))
        t.start()

# Fonction de bruteforce simulée
def bruteforce_attack_gui(username, output_widget):
    output_widget.delete("1.0", tk.END)
    correct_password = "doranco"
    found = False
    for pwd in passwords:
        output_widget.insert(tk.END, f"Essai avec le mot de passe : {pwd}\\n")
        output_widget.update()
        if pwd == correct_password:
            output_widget.insert(tk.END, f"Mot de passe trouvé pour {username} : {pwd}\\n")
            found = True
            break
    if not found:
        output_widget.insert(tk.END, "Mot de passe introuvable dans le dictionnaire.\\n")

# Interface principale
def main_menu():
    def scan_ports():
        target_ip = simpledialog.askstring("Adresse IP", "Entrez l'adresse IP à scanner:")
        if not target_ip:
            return
        start = simpledialog.askinteger("Port début", "Port de début:")
        end = simpledialog.askinteger("Port fin", "Port de fin:")
        if start is None or end is None:
            return
        banner_grab_gui(target_ip, start, end, output_text)

    def start_bruteforce():
        user = simpledialog.askstring("Nom d'utilisateur", "Nom de l'utilisateur cible:")
        if user:
            bruteforce_attack_gui(user, output_text)

    root = tk.Tk()
    root.title("Outil Réseau & Pentest")
    root.geometry("650x400")

    title = tk.Label(root, text="Menu Principal", font=("Helvetica", 16))
    title.pack(pady=10)

    scan_button = tk.Button(root, text="1 - Scanner des ports", command=scan_ports, width=30)
    scan_button.pack(pady=5)

    attack_button = tk.Button(root, text="2 - Attaque par dictionnaire", command=start_bruteforce, width=30)
    attack_button.pack(pady=5)

    output_text = scrolledtext.ScrolledText(root, wrap=tk.WORD, width=80, height=15)
    output_text.pack(padx=10, pady=10)

    root.mainloop()

if __name__ == "__main__":
    main_menu()